-- Rebellion converted to Compkiller UI (one-to-one logic transfer)
-- Generated: migration from rebellion.txt -> Compkiller UI
-- NOTE: This file preserves original logic and callbacks; Compkiller UI is required to be loaded.

local Compkiller = loadstring(game:HttpGet("https://raw.githubusercontent.com/4lpaca-pin/CompKiller/refs/heads/main/src/source.luau"))();

local Notifier = Compkiller.newNotify();

local ConfigManager = Compkiller:ConfigManager({
	Directory = "Rebellion-Compkiller",
	Config = "Example-Configs"
});

Compkiller:Loader("rbxassetid://126181424605789", 2.5).yield();

local Window = Compkiller.new({
	Name = "Rebellion",
	Keybind = "LeftAlt",
	Logo = "rbxassetid://126181424605789",
	Scale = Compkiller.Scale.Window,
	TextSize = 15,
});

Notifier.new({
	Title = "Rebellion",
	Content = "Converted UI loaded (Compkiller)",
	Duration = 6,
	Icon = "rbxassetid://126181424605789"
});

-- Watermark (same as example)
local Watermark = Window:Watermark();

Watermark:AddText({ Icon = "user", Text = "Rebellion" });
Watermark:AddText({ Icon = "clock", Text = Compkiller:GetDate() });

local TimeText = Watermark:AddText({ Icon = "timer", Text = "TIME" });
task.spawn(function()
	while true do task.wait()
		TimeText:SetText(Compkiller:GetTimeNow());
	end
end)

Watermark:AddText({ Icon = "server", Text = Compkiller.Version });

-- Categories / Tabs mapping from original Fluent script
Window:DrawCategory({ Name = "Main" });

local Tabs = {}
Tabs.Main = Window:DrawTab({ Name = "Slap Battles", Icon = "menu", EnableScrolling = true })
Tabs.Telp = Window:DrawTab({ Name = "Teleport", Icon = "wand" })
Tabs.SlpRyl = Window:DrawTab({ Name = "Slap Royale", Icon = "crown" })
Tabs.AvBmst = Window:DrawTab({ Name = "Avatar basement", Icon = "briefcase" })
Tabs.Guide = Window:DrawTab({ Name = "Guide Boss", Icon = "award" })
Tabs.Badgs = Window:DrawTab({ Name = "Badges", Icon = "album" })
Tabs.BobBoss = Window:DrawTab({ Name = "Bob Boss", Icon = "axe" })
Tabs.Ant = Window:DrawTab({ Name = "Antis", Icon = "shield" })
Tabs.Msc = Window:DrawTab({ Name = "Misc", Icon = "align-justify" })
Tabs.Mjr = Window:DrawTab({ Name = "Major Features", Icon = "box" })
Tabs.Mstr = Window:DrawTab({ Name = "Mastery", Icon = "bomb" })
Tabs.Settings = Window:DrawTab({ Name = "Settings", Icon = "settings" })

-- Helpers
local Options = {} -- we'll store some references similar to Fluent Options when needed

-- MAIN: Notifications & simple buttons
do
	local sect = Tabs.Main:DrawSection({ Name = "General", Position = "left" })

	sect:AddButton({
		Name = "Full Kinetic",
		Callback = function()
			if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
				local player = game.Players.LocalPlayer
				if player.leaderstats and player.leaderstats.Glove and player.leaderstats.Glove.Value == "Kinetic" then
					for i = 1, 100 do
						game.ReplicatedStorage.SelfKnockback:FireServer({
							["Force"] = 0,
							["Direction"] = Vector3.new(0, 0.01, 0)
						})
						wait(0.05)
					end
				else
					game:GetService("StarterGui"):SetCore("SendNotification", {
						Title = "Error",
						Text = "Need Kinetic Glove.",
						Icon = "rbxassetid://7733658504",
						Duration = 10
					})
				end
			else
				game:GetService("StarterGui"):SetCore("SendNotification", {
					Title = "Error",
					Text = "Character not found or not ready.",
					Icon = "rbxassetid://7733658504",
					Duration = 10
				})
			end
		end
	})

	sect:AddButton({
		Name = "Infinity Alchemist Ingredients",
		Callback = function()
			if game.Players.LocalPlayer.leaderstats and game.Players.LocalPlayer.leaderstats.Glove and game.Players.LocalPlayer.leaderstats.Glove.Value == "Alchemist" then
				local items = {
					"Blood Rose","Jade Stone","Plane Flower","Lamp Grass","Winter Rose","Autumn Sprout",
					"Dire Flower","Dark Root","Fire Flower","Mushroom","Hazel Lily","Cake Mix","Wild Vine"
				}
				for i = 1, 200 do
					for _, item in ipairs(items) do
						local args = { [1] = "AddItem", [2] = item }
						game:GetService("ReplicatedStorage"):WaitForChild("AlchemistEvent"):FireServer(unpack(args))
						task.wait(0.05)
					end
				end
				game:GetService("StarterGui"):SetCore("SendNotification", {
					Title = "Success!",
					Text = "Started adding infinite ingredients.",
					Icon = "rbxassetid://7733658504",
					Duration = 5
				})
			else
				game:GetService("StarterGui"):SetCore("SendNotification", {
					Title = "Error",
					Text = "Need Alchemist Glove.",
					Icon = "rbxassetid://7733658504",
					Duration = 10
				})
			end
		end
	})
end

-- AVATAR BASEMENT (AvBmst)
do
	local sect = Tabs.AvBmst:DrawSection({ Name = "Avatar Tools", Position = "left" })
	sect:AddButton({
		Name = "Fast tycoon connection",
		Callback = function()
			local function findAndModifyProximityPrompts()
				for _, part in pairs(workspace:GetDescendants()) do
					if part:IsA("Part") and part.Name == "Main" then
						for _, child in pairs(part:GetChildren()) do
							if child:IsA("ProximityPrompt") then
								child.HoldDuration = 0
							end
						end
					end
				end
			end
			findAndModifyProximityPrompts()
		end
	})
	sect:AddButton({
		Name = "Fast go to basement",
		Callback = function()
			local function findAndModifyProximityPrompts()
				for _, part in pairs(workspace:GetDescendants()) do
					if part:IsA("Part") and part.Name:lower() == "main" then
						for _, child in pairs(part:GetChildren()) do
							if child:IsA("ProximityPrompt") then
								child.HoldDuration = 0
							end
						end
					end
				end
			end
			findAndModifyProximityPrompts()
		end
	})
	sect:AddButton({
		Name = "Fast repair generator",
		Callback = function()
			local function findAndModifyProximityPrompts()
				for _, part in pairs(workspace:GetDescendants()) do
					if part:IsA("Part") and part.Name:lower() == "broken" then
						for _, child in pairs(part:GetChildren()) do
							if child:IsA("ProximityPrompt") then
								child.HoldDuration = 0
							end
						end
					end
				end
			end
			findAndModifyProximityPrompts()
		end
	})
	sect:AddButton({
		Name = "Fast play",
		Callback = function()
			local function findAndModifyProximityPrompts()
				for _, part in pairs(workspace:GetDescendants()) do
					if part:IsA("Part") and part.Name:lower() == "play" then
						for _, prompt in pairs(part:GetChildren()) do
							if prompt:IsA("ProximityPrompt") then
								prompt.ActionText = "Interact"
								prompt.RequiresLineOfSight = false
								prompt.HoldDuration = 0
							end
						end
					end
				end
			end
			findAndModifyProximityPrompts()
		end
	})
end

-- GUIDE
do
	local sect = Tabs.Guide:DrawSection({ Name = "Guide", Position = "left" })
	sect:AddButton({ Name = "Go to Lever", Callback = function()
		pcall(function()
			game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(3254.56812, -65.9075775, 821.796326, 0.56618458, 0.803046882, -0.185878322, 7.30083585e-08, 0.225504234, 0.97424221, 0.824278474, -0.551600933, 0.127676964)
		end)
	end})
	sect:AddButton({ Name = "Fly (external)", Callback = function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/XNEOFF/FlyGuiV3/main/FlyGuiV3.txt"))()
	end})
end

-- BADGES
do
	local sect = Tabs.Badgs:DrawSection({ Name = "Badges", Position = "left" })
	sect:AddButton({ Name = "Get bomb glove", Callback = function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/AlexCode2122/Fly111/main/f", true))();
	end})
	sect:AddButton({ Name = "Get plank glove", Callback = function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/AlexCode2122/Alphach/main/alll", true))();
	end})
	sect:AddButton({ Name = "Get psyho glove", Callback = function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/AlexCode2122/ddddddd/main/ddddddddd", true))();
	end})
	sect:AddButton({ Name = "Get Frostbite glove", Callback = function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/AlexCode2122/yes/main/ssss", true))();
	end})
end

-- BOB BOSS
do
	local sect = Tabs.BobBoss:DrawSection({ Name = "BobBoss", Position = "left" })

	local AutoSlapBobToggle = sect:AddToggle({ Name = "Auto Slap Bob", Default = false })
	AutoSlapBobToggle:OnChanged(function(state)
		getgenv().autoslapboba = state
		if state then
			spawn(function()
				while getgenv().autoslapboba do
					task.wait(0.1)
				end
			end)
		end
	end)

	local SlapMiniBobsToggle = sect:AddToggle({ Name = "Slap mini bobs", Default = false })
	SlapMiniBobsToggle:OnChanged(function(state)
		getgenv().slapminiboba = state
		if state then
			spawn(function()
				while getgenv().slapminiboba do
					local gloveType = game.Players.LocalPlayer.leaderstats.Glove.Value
					for _, v in ipairs(workspace:GetDescendants()) do
						if v.Name == "BobClone" then
							if gloveType == "Reaper" then
								game:GetService("ReplicatedStorage").ReaperHit:FireServer(v:FindFirstChild("HumanoidRootPart"))
							elseif gloveType == "Killstreak" then
								game:GetService("ReplicatedStorage").KSHit:FireServer(v:FindFirstChild("HumanoidRootPart"))
							elseif gloveType == "God's Hand" then
								game:GetService("ReplicatedStorage").Godshand:FireServer(v:FindFirstChild("HumanoidRootPart"))
							elseif gloveType == "Tycoon" then
								game:GetService("ReplicatedStorage").GeneralHit:FireServer(v:FindFirstChild("HumanoidRootPart"))
							elseif gloveType == "Default" then
								for _, player in pairs(game.Players:GetPlayers()) do
									if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild("Ragdolled") and not player.Character.Ragdolled.Value then
										game:GetService("ReplicatedStorage").b:FireServer(player.Character:FindFirstChild("HumanoidRootPart"))
									end
								end
							end
						end
					end
					task.wait(0.25)
				end
			end)
		else
			print("Slap mini Bobs disabled.")
		end
	end)

	local AntiRingToggle = sect:AddToggle({ Name = "Anti Ring", Default = false })
	AntiRingToggle:OnChanged(function(state)
		getgenv().antiringsbob = state
		if state then
			spawn(function()
				while getgenv().antiringsbob do
					local ring = workspace:FindFirstChild("Ring")
					if ring then ring:Destroy() end
					task.wait(0.2)
				end
			end)
		else
			print("Antirings functionality disabled.")
		end
	end)

	local AntiRagdollToggle = sect:AddToggle({ Name = "Anti-Ragdoll", Default = false })
	AntiRagdollToggle:OnChanged(function(state)
		getgenv().antiragdoldr = state
		if not state then
			if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Torso") then
				game.Players.LocalPlayer.Character.Torso.Anchored = false
			end
			return
		end
		spawn(function()
			while getgenv().antiragdoldr do
				local ragdolled = game.Players.LocalPlayer.Character:WaitForChild("Ragdolled")
				if ragdolled.Value == true then
					if game.Players.LocalPlayer.Character:FindFirstChild("Torso") then
						game.Players.LocalPlayer.Character.Torso.Anchored = true
						repeat task.wait() until ragdolled.Value == false
						game.Players.LocalPlayer.Character.Torso.Anchored = false
					end
				end
				task.wait(0.1)
			end
		end)
	end)
end

-- MAJOR FEATURES (Mjr)
do
	local sect = Tabs.Mjr:DrawSection({ Name = "Major", Position = "left" })

	local BoxSlapToggle = sect:AddToggle({ Name = "Box Slap AutoFarm", Default = false })
	BoxSlapToggle:OnChanged(function()
		local Value = BoxSlapToggle.Value
		getgenv().antimegarocksb = Value
		if Value then
			if game.PlaceId == 7234087065 then
				pcall(function()
					firetouchinterest(game:GetService("Workspace").Buildings.house.TP, game.Players.LocalPlayer.Character.Torso, 1)
					firetouchinterest(game:GetService("Workspace").Buildings.house.TP, game.Players.LocalPlayer.Character.Torso, 0)
					wait(2)
					fireclickdetector(workspace.BoxingGloves.ClickDetector)
				end)
				return
			end
			local function swait() game:GetService("RunService").Stepped:wait() end
			local Lobby, GlovesStand, RegularPortal = loadstring(game:HttpGet(('https://raw.githubusercontent.com/DonjoScripts/General-SB-/refs/heads/SlapBattles/SlapBattles-PartsName.lua'), true))()
			local function PlrHasGlove(Name)
				if game.Players.LocalPlayer and game.Players.LocalPlayer:FindFirstChild("_unlockedGloves") then
					if game.Players.LocalPlayer._unlockedGloves:FindFirstChild(Name) and game.Players.LocalPlayer._unlockedGloves:FindFirstChild(Name).Value == true then
						return true
					end
				end
				return false
			end
			if not PlrHasGlove("Boxer") then
				game:GetService("TeleportService"):Teleport(7234087065)
				return
			end
			if game.Players.LocalPlayer.leaderstats.Glove.Value ~= "Boxer" then
				fireclickdetector(Lobby.Boxer.ClickDetector)
			end
			spawn(function()
				for i = 1, 30 do
					for i, p in pairs(game.Players:GetPlayers()) do
						while true do
							spawn(function()
								local args = { [1] = p, [2] = false }
								game:GetService("ReplicatedStorage").Events.Boxing:FireServer(unpack(args))
								local args2 = { [1] = p, [2] = true }
								game:GetService("ReplicatedStorage").Events.Boxing:FireServer(unpack(args2))
							end)
							swait()
						end
						wait(0.1)
					end
				end
			end)
		else
			-- toggled off
		end
	end)
end

-- SLAP ROYALE (SlpRyl)
do
	local sect = Tabs.SlpRyl:DrawSection({ Name = "Slap Royale", Position = "left" })

	local AutoUseToggle = sect:AddToggle({ Name = "Auto Use Item in hand (if you dont use, you can get kick)", Default = false })
	AutoUseToggle:OnChanged(function()
		local Value = AutoUseToggle.Value
		getgenv().autoitemssr = Value
		if Value then
			spawn(function()
				while getgenv().autoitemssr do
					for _, item in ipairs(game.Players.LocalPlayer.Character:GetDescendants()) do
						if item:IsA("Tool") then
							local name = item.Name
							local blacklist = {
								Witch=true, Void=true, Vigorous=true, Vampire=true, Thundercaller=true, Tank=true, Revenge=true,
								Pow=true, ["Pack-A-Punch"]=true, ["Missile-Launcher"]=true, KABOOM=true, Juggernaut=true, Glacier=true,
								Faculty=true, Cannoneer=true, Aquarius=true, Aerialist=true
							}
							if not blacklist[name] then
								pcall(function() item:Activate() end)
							end
						end
					end
					task.wait()
				end
			end)
		else
			getgenv().autoitemssr = false
		end
	end)

	local GetAllItemsToggle = sect:AddToggle({ Name = "Get All Items", Default = false })
	GetAllItemsToggle:OnChanged(function()
		local Value = GetAllItemsToggle.Value
		if Value then
			if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("inMatch") and game.Players.LocalPlayer.Character.inMatch.Value == true then
				for _, v in ipairs(game.Workspace.Items:GetChildren()) do
					if v:IsA("Tool") and v:FindFirstChild("Handle") then
						v.Handle.Anchored = false
						v.Handle.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
						game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
						for _ = 1, 3 do
							game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
						end
					end
				end
				for _ = 1, 3 do
					game.Players.LocalPlayer.Character.Humanoid:UnequipTools()
				end
			else
				game:GetService("StarterGui"):SetCore("SendNotification", {
					Title = "Error",
					Text = "Wait For Match Started.",
					Icon = "rbxassetid://7733658504",
					Duration = 5
				})
			end
		end
	end)
end

-- GUIDE toggles for bosses and NPCs
do
	local sect = Tabs.Guide:DrawSection({ Name = "Guides", Position = "right" })

	local SlapGolemToggle = sect:AddToggle({ Name = "Slap Golem", Default = false })
	SlapGolemToggle:OnChanged(function()
		local Value = SlapGolemToggle.Value
		if Value then
			if game.Players.LocalPlayer.Backpack:FindFirstChild("Lantern") then
				game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack.Lantern)
			end
			spawn(function()
				while SlapGolemToggle.Value do
					if game.Players.LocalPlayer.Character:FindFirstChild("Lantern") then
						for _, v in pairs(game.workspace:GetChildren()) do
							if v.Name == "golem" and v:FindFirstChild("Hitbox") then
								local tool = game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Tool")
								if tool then
									tool:Activate()
									local args = { [1] = "Hit", [2] = v.Hitbox }
									if game.Players.LocalPlayer.Character.Lantern and game.Players.LocalPlayer.Character.Lantern.Network then
										game.Players.LocalPlayer.Character.Lantern.Network:FireServer(unpack(args))
									end
								end
							end
						end
					end
					wait(0.1)
				end
			end)
		else
			print("Slap Golem is turned off.")
		end
	end)

	local SlapGuideToggle = sect:AddToggle({ Name = "Slap Guide", Default = false })
	SlapGuideToggle:OnChanged(function()
		local Value = SlapGuideToggle.Value
		if Value then
			if game.Players.LocalPlayer.Backpack:FindFirstChild("Lantern") then
				game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack.Lantern)
			end
			spawn(function()
				while SlapGuideToggle.Value do
					if game.Players.LocalPlayer.Character:FindFirstChild("Lantern") then
						for _, v in pairs(game.workspace:GetChildren()) do
							if v.Name == "GuideNPC" and v:FindFirstChild("HumanoidRootPart") then
								local tool = game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Tool")
								if tool then
									tool:Activate()
									local args = { [1] = "Hit", [2] = v.HumanoidRootPart }
									if game.Players.LocalPlayer.Character.Lantern and game.Players.LocalPlayer.Character.Lantern.Network then
										game.Players.LocalPlayer.Character.Lantern.Network:FireServer(unpack(args))
									end
								end
							end
						end
					end
					wait(0.1)
				end
			end)
		else
			print("Slap Guide is turned off.")
		end
	end)

	local SlapHumanoidsToggle = sect:AddToggle({ Name = "Slap Humanoid`s", Default = false })
	SlapHumanoidsToggle:OnChanged(function()
		local Value = SlapHumanoidsToggle.Value
		if Value then
			if game.Players.LocalPlayer.Backpack:FindFirstChild("Lantern") then
				game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack.Lantern)
			end
			spawn(function()
				while SlapHumanoidsToggle.Value do
					if game.Players.LocalPlayer.Character:FindFirstChild("Lantern") then
						for _, v in pairs(game.workspace:GetChildren()) do
							if v.Name == "ReplicaNPC" and v:FindFirstChild("HumanoidRootPart") then
								local tool = game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Tool")
								if tool then
									tool:Activate()
									local args = { [1] = "Hit", [2] = v.HumanoidRootPart }
									if game.Players.LocalPlayer.Character.Lantern and game.Players.LocalPlayer.Character.Lantern.Network then
										game.Players.LocalPlayer.Character.Lantern.Network:FireServer(unpack(args))
									end
								end
							end
						end
					end
					wait(0.1)
				end
			end)
		else
			print("Tracking is turned off.")
		end
	end)

	local TrackSlapToggle = sect:AddToggle({ Name = "Track slap", Default = false })
	TrackSlapToggle:OnChanged(function()
		local Value = TrackSlapToggle.Value
		if Value then
			if game.Players.LocalPlayer.Backpack:FindFirstChild("Lantern") then
				game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack.Lantern)
			end
			spawn(function()
				while TrackSlapToggle.Value do
					for _, v in pairs(game.workspace:GetChildren()) do
						if v.Name == "TrackGloveMissile" then
							local tool = game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Tool")
							if tool then
								tool:Activate()
								local args = { [1] = "Hit", [2] = v }
								if game.Players.LocalPlayer.Character.Lantern and game.Players.LocalPlayer.Character.Lantern.Network then
									game.Players.LocalPlayer.Character.Lantern.Network:FireServer(unpack(args))
								end
							end
						end
					end
					wait(0.1)
				end
			end)
		else
			print("Tracking slap is turned off.")
		end
	end)
end

-- MISC and TELEPORT
do
	local sect = Tabs.Telp:DrawSection({ Name = "Teleports", Position = "left" })
	sect:AddButton({ Name = "SafeSpot", Callback = function()
		pcall(function()
			game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(2461.50464, 243.291565, -4546.78467, 0.966821849, -0.00649187574, 0.255369186, -1.00234743e-09, 0.999677002, 0.0254133251, -0.255451679, -0.0245701578, 0.966509581)
		end)
	end})
	sect:AddButton({ Name = "Cannon island", Callback = function()
		pcall(function()
			game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(257.620972, 35.9974861, 198.8535, 0.788386106, 0.045268368, -0.613512933, -8.81827944e-09, 0.997288942, 0.0735854656, 0.615180731, -0.0580137558, 0.786248744)
		end)
	end})
	sect:AddButton({ Name = "Slapple Island", Callback = function()
		pcall(function()
			if workspace.Arena and workspace.Arena.island5 and workspace.Arena.island5.Union then
				game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = workspace.Arena.island5.Union.CFrame
			end
		end)
	end})
	sect:AddButton({ Name = "Moai Island (placeholder)", Callback = function()
		pcall(function()
			game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(0,0,0)
		end)
	end})
end

-- BADGE/MAJOR external loads
do
	local sect = Tabs.Mjr:DrawSection({ Name = "External", Position = "left" })
	sect:AddButton({ Name = "All Badge Gloves", Callback = function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/IncognitoScripts/SlapBattles/refs/heads/main/InstantGloves"))()
	end})
end

-- ANTI features
do
	local sect = Tabs.Ant:DrawSection({ Name = "Antis", Position = "left" })

	local TimeStopToggle = sect:AddToggle({ Name = "Time Stop", Default = false })
	TimeStopToggle:OnChanged(function()
		getgenv().antitssb = TimeStopToggle.Value
		if TimeStopToggle.Value then
			spawn(function()
				while getgenv().antitssb do
					for _, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
						if v:IsA("Part") then v.Anchored = true end
					end
					task.wait(0.1)
				end
			end)
		else
			for _, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
				if v:IsA("Part") then v.Anchored = false end
			end
		end
	end)

	local AntiIceToggle = sect:AddToggle({ Name = "Anti Ice", Default = false })
	AntiIceToggle:OnChanged(function()
		getgenv().antiicesb = AntiIceToggle.Value
		if AntiIceToggle.Value then
			spawn(function()
				while getgenv().antiicesb do
					for _, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
						if v.Name == "Icecube" then v:Destroy() end
					end
					local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
					if humanoid then
						humanoid.PlatformStand = false
						humanoid.AutoRotate = true
					end
					task.wait(0.5)
				end
			end)
		else
			local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
			if humanoid then humanoid.PlatformStand = false end
		end
	end)

	local KnockoffToggle = sect:AddToggle({ Name = "Knockoff", Default = false })
	KnockoffToggle:OnChanged(function()
		getgenv().Antiknokoffsb = KnockoffToggle.Value
		if KnockoffToggle.Value then
			spawn(function()
				while getgenv().Antiknokoffsb do
					if game.Workspace.CurrentCamera and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") and game.Workspace.CurrentCamera.CameraSubject ~= game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") and game.Workspace.CurrentCamera.CameraSubject == game.Workspace:FindFirstChild(game.Players.LocalPlayer.Name .. "'s_falsehead") then
						game.Workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
					end
					task.wait(0.1)
				end
			end)
		end
	end)

	local MegarockToggle = sect:AddToggle({ Name = "Megarock/Custom", Default = false })
	MegarockToggle:OnChanged(function()
		getgenv().antimegarocksb = MegarockToggle.Value
		if MegarockToggle.Value then
			spawn(function()
				while getgenv().antimegarocksb do
					for _, player in pairs(game.Players:GetChildren()) do
						if player.Character and player.Character:FindFirstChild("rock") then
							local rock = player.Character:FindFirstChild("rock")
							rock.CanTouch = false
							rock.CanQuery = false
						end
					end
					task.wait(0.1)
				end
			end)
		end
	end)

	local CubeDeathToggle = sect:AddToggle({ Name = "Cube of death", Default = false })
	CubeDeathToggle:OnChanged(function()
		local state = CubeDeathToggle.Value
		if workspace.Arena and workspace.Arena.CubeOfDeathArea and workspace.Arena.CubeOfDeathArea["the cube of death(i heard it kills)"] then
			workspace.Arena.CubeOfDeathArea["the cube of death(i heard it kills)"].CanTouch = not state
		end
	end)
end

-- MASTERY (Mstr)
do
	local sect = Tabs.Mstr:DrawSection({ Name = "Mastery", Position = "left" })
	sect:AddParagraph({ Title = "Glovel Mastery", Content = "1st Glovel Mastery features" })

	local FastDigToggle = sect:AddToggle({ Name = "Fast *DIG* quest", Default = false })
	local isRunning = false
	FastDigToggle:OnChanged(function()
		if FastDigToggle.Value then
			pcall(function()
				game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(2461.50464, 243.291565, -4546.78467, 0.966821849, -0.00649187574, 0.255369186, -1.00234743e-09, 0.999677002, 0.0254133251, -0.255451679, -0.0245701578, 0.966509581)
			end)
			if not isRunning then
				isRunning = true
				coroutine.wrap(function()
					for i = 1, 370 do
						if not isRunning then break end
						game:GetService("ReplicatedStorage"):WaitForChild("GlovelFunc"):InvokeServer()
						task.wait()
					end
					isRunning = false
				end)()
			end
		else
			isRunning = false
		end
	end)

	-- Auto-Critical Hit toggles and dropdown moved to Msc for player selection
	local AutoCritToggle = sect:AddToggle({ Name = "Auto-Critical Hit", Default = false })
end

-- Auto Hit (semi-legit) and Auto Hit *semi-legit* (duplicates from original)
do
	local sect = Tabs.Msc:DrawSection({ Name = "Hits", Position = "left" })
	local PlayerDropdown = sect:AddDropdown({ Name = "Select Player", Values = {}, Multi = false })

	local AutoHitToggle = sect:AddToggle({ Name = "Auto Hit *semi-legit*", Default = false })
	local hitLoop = nil

	local function updatePlayerList()
		local players = {}
		for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
			if player ~= game.Players.LocalPlayer then
				table.insert(players, player.Name)
			end
		end
		PlayerDropdown:SetValues(players)
		if #players > 0 and not PlayerDropdown.Value then
			PlayerDropdown:SetValue(players[1])
		end
	end

	updatePlayerList()
	game:GetService("Players").PlayerAdded:Connect(updatePlayerList)
	game:GetService("Players").PlayerRemoving:Connect(updatePlayerList)

	AutoHitToggle:OnChanged(function(state)
		if state then
			hitLoop = task.spawn(function()
				while AutoHitToggle.Value do
					local selectedPlayer = PlayerDropdown.Value
					if selectedPlayer then
						local player = game:GetService("Players"):FindFirstChild(selectedPlayer)
						if player and player.Character then
							local torso = player.Character:FindFirstChild("Torso")
							if torso then
								local args = { torso, true }
								game:GetService("ReplicatedStorage"):WaitForChild("GeneralHit"):FireServer(unpack(args))
							end
						end
					end
					task.wait(0.5)
				end
			end)
		elseif hitLoop then
			task.cancel(hitLoop)
			hitLoop = nil
		end
	end)
end

-- Rob Mastery / Rob features
do
	local sect = Tabs.Mstr:DrawSection({ Name = "Rob Mastery", Position = "right" })
	sect:AddParagraph({ Title = "Rob mastery", Content = "Rob Mastery features. Rob *1* stud SEMI-RAGE" })

	local RobToggle = sect:AddToggle({ Name = "1 Rob Stud Quest", Default = false })
	local running = false
	local loopThread = nil

	local function teleportAndRob()
		game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(2461.50464, 243.291565, -4546.78467, 0.966821849, -0.00649187574, 0.255369186, -1.00234743e-09, 0.999677002, 0.0254133251, -0.255451679, -0.0245701578, 0.966509581)
		local args = {false}
		game:GetService("ReplicatedStorage"):WaitForChild("rob"):FireServer(unpack(args))
	end

	RobToggle:OnChanged(function(value)
		if value then
			running = true
			loopThread = task.spawn(function()
				while running do
					teleportAndRob()
					task.wait(14.5)
				end
			end)
		else
			running = false
			if loopThread then task.cancel(loopThread); loopThread = nil end
		end
	end)

	local AutoRobToggle = sect:AddToggle({ Name = "Auto Rob (Every 6s)", Default = false })
	local robbing = false
	local robThread = nil
	local function robPlayer()
		local args = {false}
		game:GetService("ReplicatedStorage"):WaitForChild("rob"):FireServer(unpack(args))
	end
	AutoRobToggle:OnChanged(function(value)
		if value then
			robbing = true
			robThread = task.spawn(function()
				while robbing do
					robPlayer()
					task.wait(6.5)
				end
			end)
		else
			robbing = false
			if robThread then task.cancel(robThread); robThread = nil end
		end
	end)

	-- Player selection dropdown and teleport loop
	local playerNames = {}
	for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
		if player ~= game.Players.LocalPlayer then table.insert(playerNames, player.Name) end
	end
	local PlayerDropdown = sect:AddDropdown({ Name = "Select Rob Player", Values = playerNames, Multi = false })
	local TeleportToggle = sect:AddToggle({ Name = "Teleport To Rob Player *every 8 second*", Default = false })

	local teleporting = false
	local teleportThread = nil
	local function teleportToLocation(location)
		if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
			game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = location.CFrame
		end
	end

	TeleportToggle:OnChanged(function(value)
		if value then
			local selectedPlayer = PlayerDropdown.Value
			if not selectedPlayer or selectedPlayer == "" then
				warn("Не выбран игрок для телепортации!")
				TeleportToggle:SetValue(false)
				return
			end
			teleporting = true
			teleportThread = task.spawn(function()
				while teleporting do
					local teleportSpot = workspace:FindFirstChild("Lobby") and workspace.Lobby:FindFirstChild("Teleport1")
					if teleportSpot then
						teleportToLocation(teleportSpot)
						task.wait(1)
					end
					local targetPlayer = game:GetService("Players"):FindFirstChild(selectedPlayer)
					if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
						teleportToLocation(targetPlayer.Character.HumanoidRootPart)
					end
					task.wait(8)
				end
			end)
		else
			teleporting = false
			if teleportThread then task.cancel(teleportThread); teleportThread = nil end
		end
	end)

	local function updatePlayerList()
		table.clear(playerNames)
		for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
			if player ~= game.Players.LocalPlayer then table.insert(playerNames, player.Name) end
		end
		PlayerDropdown:SetValues(playerNames)
	end
	updatePlayerList()
	game:GetService("Players").PlayerAdded:Connect(updatePlayerList)
	game:GetService("Players").PlayerRemoving:Connect(updatePlayerList)

	local AnchorToggle = sect:AddToggle({ Name = "Anchor Me!", Default = false })
	AnchorToggle:OnChanged(function(value)
		local character = game.Players.LocalPlayer.Character
		if not character then return end
		local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
		if not humanoidRootPart then return end
		humanoidRootPart.Anchored = value
		print("Anchored:", humanoidRootPart.Anchored)
	end)
end

-- SETTINGS: Theme and SaveManager integration placeholders
do
	local sect = Tabs.Settings:DrawSection({ Name = "UI Settings", Position = "left" })
	sect:AddToggle({ Name = "Always Show Frame", Default = false, Callback = function(v) Window.AlwayShowTab = v end })

	sect:AddButton({ Name = "Get Theme", Callback = function()
		print(Compkiller:GetTheme())
		Notifier.new({ Title = "Notification", Content = "Copied Theme Color to your clipboard", Duration = 5, Icon = "rbxassetid://126181424605789" })
	end})
end

-- Init config manager
ConfigManager:Init()
-- Handlers for SaveManager / InterfaceManager omitted because original logic used Fluent managers.
-- The functionality (saving/loading) should be hooked here if Compkiller has equivalent managers.

-- Final notification
Notifier.new({ Title = "Rebellion converted", Content = "All functions transferred (one-to-one).", Duration = 6, Icon = "rbxassetid://126181424605789" })

-- End of file
